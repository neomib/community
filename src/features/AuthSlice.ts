import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../app/store';
import firebase from 'firebase';

export interface AuthState {
  user:firebase.User | null | undefined;
  userClaims:{[key:string]:any} | null;
}

const initialState: AuthState = {
 user: undefined,
 userClaims:null,
};


// export const incrementAsync = createAsyncThunk(
//   '',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     return response.data;
//   }
// );

export const AuthSlice = createSlice({
  name: 'Auth',
  initialState,
  reducers: {
    setUser: (state, action: PayloadAction<firebase.User | null>) => {
      state.user = action.payload;
    },
    setUserClaims: (state, action: PayloadAction<{[key:string]:any} | null>) => {
      state.userClaims = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const {setUser,setUserClaims } = AuthSlice.actions;


export const selectUser = (state: RootState) => state.auth.user;
export const selectUserClaims = (state: RootState) => state.auth.userClaims;


// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default AuthSlice.reducer;

